cc_library(
    name = "hdkeys",
    srcs = [
        "hdkeygen.hpp",
        "hdkeygen.cpp",
        "pubkey.h",
        "pubkey.cpp",
        "hash.h",
        "hash.cpp",
		"key_io.h",
		"key_io.cpp",
        "key.h",
        "key.cpp",
		"base58.h",
		"base58.cpp",
        "prevector.h",
        "span.h",
        "serialize.h",
        "version.h",
        "attributes.h",
        "amount.h",
        "bech32.h",
        "bech32.cpp",
        "protocol.h",
        "chainparams.h",
        "chainparams.cpp",
        "chainparamsseeds.h",
        "chainparamsbase.h",
        "chainparamsbase.cpp",
        "versionbitsinfo.h",
        "versionbitsinfo.cpp",
        "outputtype.h",
        "outputtype.cpp",
        "consensus/merkle.h",
        "consensus/merkle.cpp",
        "consensus/params.h",
        "util/strencodings.h",
        "util/strencodings.cpp",
        "util/memory.h",
        "util/com_github_bitcoin_bitcoin_util_string.h",
        "util/com_github_bitcoin_bitcoin_util_string.cpp",
        "util/vector.h",
        "compat/endian.h",
        "compat/byteswap.h",
        "compat/cpuid.h",
        "crypto/common.h",
        "crypto/sha512.h",
        "crypto/sha512.cpp",
        "crypto/sha1.h",
        "crypto/sha1.cpp",
        "crypto/hmac_sha512.h",
        "crypto/hmac_sha512.cpp",
        "crypto/ripemd160.h",
        "crypto/ripemd160.cpp",
        "crypto/sha256.h",
        "crypto/sha256.cpp",
        "crypto/chacha20.h",
        "crypto/chacha20.cpp",
        "script/interpreter.h",
        "script/interpreter.cpp",
        "script/script_error.h",
        "script/script_error.cpp",
        "script/script.h",
        "script/script.cpp",
        "script/standard.h",
        "script/standard.cpp",
        "primitives/transaction.cpp",
        "primitives/transaction.h",
        "primitives/block.h",
        "primitives/block.cpp",
        "support/allocators/secure.h",
        "support/cleanse.h",
        "support/cleanse.cpp",
        "support/lockedpool.h",
        "support/lockedpool.cpp",
    ],
    hdrs = [
        "hdkeygen.hpp",
    ],
    deps = [
        "@//hdkeys/uint256:uint256",
		"@secp256k1//:secp256k1",
        # "@boost//:variant",
    ],
    copts = [
        "-std=c++17",
    ],
    linkopts = [
        "-pthread",
    ],
    includes = ["."],
    visibility = ["//visibility:public"],
)

cc_binary(
    name = "hdkeys_dummy",
    srcs = ["main.cpp"],
    deps = [
        ":hdkeys"
    ],
    visibility = ["//visibility:public"],
)

# Test code which was mostly lifted from Bitcoin Core
cc_test(
	name = "key_test",
	srcs = ["key.test.cpp"],
	deps = [
		":hdkeys",
		"@com_github_google_googletest//:gtest",
	],
)

# Test API deriving new client keys from an extended public key
cc_test(
	name = "hdkeygen_test",
	srcs = ["hdkeygen.test.cpp"],
	deps = [
		":hdkeys",
		"@com_github_google_googletest//:gtest",	
		"@com_github_google_googletest//:gtest_main",
	],
	visibility = ["//visibility:public"],
)
